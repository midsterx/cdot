%%

start_state
	: HEADER start_state
	| translation_unit
	;

translation_unit
	: external_declaration
	| translation_unit external_declaration
	;


external_declaration
	: function_definition
	| declaration
	;

function_definition
	: type_specifier declarator '(' params ')' compound_statement
	;

params
	: param_decl ',' params
	| param_decl
	;

param_decl
	: type_specifier declarator
	| type_specifier
	;

function_call
	: declarator '(' varList ')'
	;

varList
	: varList ',' declarator
	| declarator 
	;

declarator
	: IDENTIFIER
	;

declaration
	: type_specifier init_declarator_list ';'
	| type_specifier ';'
	;

init_declarator_list
	: init_declarator 
	| init_declarator_list ',' init_declarator 
	;

init_declarator
	: declarator '=' primary_expression
	| declarator '=' simple_expression
	| declarator '=' function_call
	| declarator
	;

type_specifier
	: VOID
	| CHAR
	| INT
	| LONG
	| FLOAT
	| DOUBLE
	| UNSIGNED INT
	| UNSIGNED SHORT INT
	| UNSIGNED LONG INT
	| UNSIGNED LONG LONG INT
	| SIGNED INT
	| SIGNED SHORT INT
	| SIGNED LONG INT
	| SIGNED LONG LONG INT
	;

primary_expression
	: declarator
	| CONSTANT
	;

simple_expression
	: simple_expression OR and_expression
	| and_expression
	;

and_expression
	: and_expression AND unary_rel_expression
	| unary_rel_expression
	;

unary_rel_expression
	: NOT factor
	| rel_expression 
	;

rel_expression
	: sum_expression
	| sum_expression RELOP sum_expression 
	;

sum_expression
	: sum_expression sumop term 
	| term 
	;

sumop
	: '+'
	| '-'
	;

logop
	: OR 
	| AND 
	;

term
	: term mulop factor
	| factor 
	;

mulop
	: '*'
	| '/'
	;

factor
	: primary_expression
	| '(' simple_expression ')'
	;


compound_statement
	: '{' '}'
	| '{' block_scope_list '}'
	;

block_scope_list
	: block_item
	| block_item block_scope_list
	;

block_item
	: declaration 
	| statement
	;

statement
	: expression_statement
	| compound_statement
	| conditional_statement
	| iteration_statement
	| break_statement
	| continue_statement
	| return_statement
	| statement ';' statement
	| function_call
	;

expression_statement
	: expression ';'
	| ';' 
	;

expression
	: declarator '=' expression 
	| simple_expression 
	| declarator '=' function_call
	;

conditional_statement
	: IF '(' condition ')' compound_statement %prec REDUCE 
	| IF '(' condition ')' compound_statement ELSE  compound_statement 
	;

condition
	: expression logop expression 
	| expression 
	;

iteration_statement
	: DO compound_statement  WHILE '(' condition ')' ';'
	;

break_statement
	: BREAK ';'
	;

continue_statement
	: CONTINUE ';'
	;

return_statement
	: RETURN ';' 
	| RETURN simple_expression ';'
	;

%%
